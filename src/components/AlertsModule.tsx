import React, { useState, useEffect } from 'react';
import { 
  Plus, 
  Search, 
  Filter, 
  Edit, 
  Trash2, 
  Eye,
  Bell,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Clock,
  RefreshCw,
  Calendar,
  TrendingUp,
  AlertCircle,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';
import { apiClient } from '../context/AuthContext';

interface Alert {
  _id: string;
  title: string;
  description: string;
  type: string;
  priority: 'Baja' | 'Media' | 'Alta' | 'Crítica';
  status: 'Activa' | 'Resuelta' | 'Descartada';
  sourceType: string;
  sourceId?: string;
  sourceName: string;
  dueDate?: string;
  resolvedDate?: string;
  resolvedBy?: {
    name: string;
    email: string;
  };
  resolvedNotes?: string;
  autoGenerated: boolean;
  metadata?: any;
  isOverdue?: boolean;
  daysUntilDue?: number;
  createdAt: string;
}

interface AlertStats {
  alertsByStatus: {
    Activa: number;
    Resuelta: number;
    Descartada: number;
  };
  alertsByPriority: {
    Baja: number;
    Media: number;
    Alta: number;
    Crítica: number;
  };
  alertsByType: Array<{
    _id: string;
    count: number;
  }>;
  overdueAlerts: number;
  totalActive: number;
}

const AlertsModule: React.FC = () => {
  const [alerts, setAlerts] = useState<Alert[]>([]);
  const [stats, setStats] = useState<AlertStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [editingAlert, setEditingAlert] = useState<Alert | null>(null);
  const [viewingAlert, setViewingAlert] = useState<Alert | null>(null);
  const [generatingAlerts, setGeneratingAlerts] = useState(false);
  
  // Filters and pagination
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [typeFilter, setTypeFilter] = useState('all');
  const [priorityFilter, setPriorityFilter] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const itemsPerPage = 20;

  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: 'Manual',
    priority: 'Media',
    sourceName: '',
    dueDate: ''
  });

  const alertTypes = [
    'Mantenimiento', 'SOAT Vencido', 'Revisión Técnica', 'Stock Bajo', 'Sin Stock',
    'Herramienta Dañada', 'Vehículo Fuera de Servicio', 'Pago Pendiente',
    'Documento Vencido', 'Manual', 'Otro'
  ];

  const priorities = ['Baja', 'Media', 'Alta', 'Crítica'];
  const statuses = ['Activa', 'Resuelta', 'Descartada'];

  useEffect(() => {
    fetchAlerts();
    fetchStats();
  }, [currentPage, searchTerm, statusFilter, typeFilter, priorityFilter]);

  const fetchStats = async () => {
    try {
      const response = await apiClient.get('/alerts/stats');
      setStats(response.data.data);
    } catch (error: any) {
      console.error('Error fetching alert stats:', error);
    }
  };

  const fetchAlerts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiClient.get('/alerts', {
        params: {
          page: currentPage,
          limit: itemsPerPage,
          status: statusFilter !== 'all' ? statusFilter : undefined,
          type: typeFilter !== 'all' ? typeFilter : undefined,
          priority: priorityFilter !== 'all' ? priorityFilter : undefined,
          search: searchTerm || undefined
        }
      });
      
      setAlerts(response.data.data || []);
      setTotalPages(response.data.pages || 1);
      setTotalItems(response.data.total || 0);
    } catch (error: any) {
      console.error('Error fetching alerts:', error);
      const errorMessage = error.response?.data?.message || 'Error al cargar las alertas';
      setError(errorMessage);
      setAlerts([]);
    } finally {
      setLoading(false);
    }
  };

  const generateAlerts = async () => {
    try {
      setGeneratingAlerts(true);
      setError(null);
      
      const response = await apiClient.post('/alerts/generate');
      
      // Refresh alerts and stats
      await fetchAlerts();
      await fetchStats();
      
      // Show success message
      const message = response.data.message || 'Alertas generadas exitosamente';
      // You could show a toast notification here
      console.log(message);
      
    } catch (error: any) {
      console.error('Error generating alerts:', error);
      const errorMessage = error.response?.data?.message || 'Error al generar alertas automáticas';
      setError(errorMessage);
    } finally {
      setGeneratingAlerts(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setError(null);
      
      if (editingAlert) {
        await apiClient.put(`/alerts/${editingAlert._id}`, formData);
      } else {
        await apiClient.post('/alerts', formData);
      }

      setShowForm(false);
      setEditingAlert(null);
      resetForm();
      fetchAlerts();
      fetchStats();
    } catch (error: any) {
      console.error('Error saving alert:', error);
      const errorMessage = error.response?.data?.message || 'Error al guardar la alerta';
      setError(errorMessage);
    }
  };

  const handleResolve = async (alert: Alert, status: 'Resuelta' | 'Descartada', notes?: string) => {
    try {
      setError(null);
      
      await apiClient.put(`/alerts/${alert._id}`, {
        status,
        resolvedNotes: notes
      });

      fetchAlerts();
      fetchStats();
    } catch (error: any) {
      console.error('Error resolving alert:', error);
      const errorMessage = error.response?.data?.message || 'Error al resolver la alerta';
      setError(errorMessage);
    }
  };

  const handleEdit = (alert: Alert) => {
    setEditingAlert(alert);
    setFormData({
      title: alert.title,
      description: alert.description,
      type: alert.type,
      priority: alert.priority,
      sourceName: alert.sourceName,
      dueDate: alert.dueDate ? alert.dueDate.split('T')[0] : ''
    });
    setShowForm(true);
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que quieres eliminar esta alerta?')) {
      try {
        setError(null);
        await apiClient.delete(`/alerts/${id}`);
        fetchAlerts();
        fetchStats();
      } catch (error: any) {
        console.error('Error deleting alert:', error);
        const errorMessage = error.response?.data?.message || 'Error al eliminar la alerta';
        setError(errorMessage);
      }
    }
  };

  const resetForm = () => {
    setFormData({
      title: '',
      description: '',
      type: 'Manual',
      priority: 'Media',
      sourceName: '',
      dueDate: ''
    });
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'Crítica':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'Alta':
        return <AlertCircle className="h-4 w-4 text-orange-500" />;
      case 'Media':
        return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'Baja':
        return <CheckCircle className="h-4 w-4 text-blue-500" />;
      default:
        return <Bell className="h-4 w-4 text-gray-500" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'Crítica':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'Alta':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'Media':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Baja':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Activa':
        return 'bg-green-100 text-green-800';
      case 'Resuelta':
        return 'bg-blue-100 text-blue-800';
      case 'Descartada':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('es-PE');
  };

  if (loading && alerts.length === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-4 text-gray-600">Cargando alertas...</span>
      </div>
    );
  }

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Centro de Alertas</h1>
          <p className="text-gray-600">Gestiona y monitorea todas las alertas del sistema</p>
        </div>
        <div className="flex space-x-3 mt-4 sm:mt-0">
          <button
            onClick={generateAlerts}
            disabled={generatingAlerts}
            className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
          >
            <RefreshCw className={`h-5 w-5 mr-2 ${generatingAlerts ? 'animate-spin' : ''}`} />
            {generatingAlerts ? 'Generando...' : 'Generar Alertas'}
          </button>
          <button
            onClick={() => {
              setShowForm(true);
              setEditingAlert(null);
              resetForm();
              setError(null);
            }}
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="h-5 w-5 mr-2" />
            Nueva Alerta
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Alertas Activas</p>
                <p className="text-3xl font-bold text-red-600">{stats.alertsByStatus.Activa}</p>
                {stats.overdueAlerts > 0 && (
                  <p className="text-sm text-red-500">{stats.overdueAlerts} vencidas</p>
                )}
              </div>
              <Bell className="h-12 w-12 text-red-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Críticas</p>
                <p className="text-3xl font-bold text-orange-600">{stats.alertsByPriority.Crítica}</p>
                <p className="text-sm text-gray-500">Requieren atención inmediata</p>
              </div>
              <AlertTriangle className="h-12 w-12 text-orange-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Resueltas</p>
                <p className="text-3xl font-bold text-green-600">{stats.alertsByStatus.Resuelta}</p>
                <p className="text-sm text-gray-500">Este período</p>
              </div>
              <CheckCircle className="h-12 w-12 text-green-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total</p>
                <p className="text-3xl font-bold text-blue-600">{stats.totalActive}</p>
                <p className="text-sm text-gray-500">Todas las alertas</p>
              </div>
              <TrendingUp className="h-12 w-12 text-blue-600" />
            </div>
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar alertas..."
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setCurrentPage(1);
              }}
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <select
            value={statusFilter}
            onChange={(e) => {
              setStatusFilter(e.target.value);
              setCurrentPage(1);
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">Todos los estados</option>
            {statuses.map(status => (
              <option key={status} value={status}>{status}</option>
            ))}
          </select>

          <select
            value={typeFilter}
            onChange={(e) => {
              setTypeFilter(e.target.value);
              setCurrentPage(1);
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">Todos los tipos</option>
            {alertTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>

          <select
            value={priorityFilter}
            onChange={(e) => {
              setPriorityFilter(e.target.value);
              setCurrentPage(1);
            }}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">Todas las prioridades</option>
            {priorities.map(priority => (
              <option key={priority} value={priority}>{priority}</option>
            ))}
          </select>

          <div className="flex items-center text-sm text-gray-600">
            <Filter className="h-4 w-4 mr-2" />
            {totalItems} alerta{totalItems !== 1 ? 's' : ''}
          </div>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />
            <span className="text-red-700">{error}</span>
            <button
              onClick={() => setError(null)}
              className="ml-auto text-red-500 hover:text-red-700"
            >
              <XCircle className="h-4 w-4" />
            </button>
          </div>
        </div>
      )}

      {/* Alerts List */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="divide-y divide-gray-200">
          {alerts.map((alert) => (
            <div key={alert._id} className={`p-6 hover:bg-gray-50 transition-colors ${alert.isOverdue ? 'bg-red-50 border-l-4 border-red-500' : ''}`}>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getPriorityColor(alert.priority)}`}>
                      {getPriorityIcon(alert.priority)}
                      <span className="ml-1">{alert.priority}</span>
                    </span>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(alert.status)}`}>
                      {alert.status}
                    </span>
                    <span className="text-xs text-gray-500">{alert.type}</span>
                    {alert.autoGenerated && (
                      <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">
                        Auto
                      </span>
                    )}
                  </div>
                  
                  <h3 className="text-lg font-semibold text-gray-900 mb-1">
                    {alert.title}
                  </h3>
                  
                  <p className="text-gray-600 mb-2">
                    {alert.description}
                  </p>
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <span>Origen: {alert.sourceName}</span>
                    <span>Creada: {formatDate(alert.createdAt)}</span>
                    {alert.dueDate && (
                      <span className={alert.isOverdue ? 'text-red-600 font-medium' : ''}>
                        <Calendar className="h-4 w-4 inline mr-1" />
                        {alert.isOverdue ? 'Vencida' : `Vence: ${formatDate(alert.dueDate)}`}
                        {alert.daysUntilDue !== null && alert.daysUntilDue >= 0 && (
                          <span className="ml-1">({alert.daysUntilDue} días)</span>
                        )}
                      </span>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 ml-4">
                  <button
                    onClick={() => setViewingAlert(alert)}
                    className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                    title="Ver detalles"
                  >
                    <Eye className="h-4 w-4" />
                  </button>
                  
                  {alert.status === 'Activa' && (
                    <>
                      <button
                        onClick={() => handleResolve(alert, 'Resuelta')}
                        className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                        title="Marcar como resuelta"
                      >
                        <CheckCircle className="h-4 w-4" />
                      </button>
                      
                      <button
                        onClick={() => handleResolve(alert, 'Descartada')}
                        className="p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors"
                        title="Descartar"
                      >
                        <XCircle className="h-4 w-4" />
                      </button>
                    </>
                  )}
                  
                  {!alert.autoGenerated && (
                    <button
                      onClick={() => handleEdit(alert)}
                      className="p-2 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors"
                      title="Editar"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                  )}
                  
                  <button
                    onClick={() => handleDelete(alert._id)}
                    className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                    title="Eliminar"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div className="flex-1 flex justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Anterior
              </button>
              <button
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
                className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Siguiente
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Mostrando{' '}
                  <span className="font-medium">{(currentPage - 1) * itemsPerPage + 1}</span>
                  {' '}a{' '}
                  <span className="font-medium">
                    {Math.min(currentPage * itemsPerPage, totalItems)}
                  </span>
                  {' '}de{' '}
                  <span className="font-medium">{totalItems}</span>
                  {' '}resultados
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <ChevronLeft className="h-5 w-5" />
                  </button>
                  
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    const page = i + 1;
                    return (
                      <button
                        key={page}
                        onClick={() => setCurrentPage(page)}
                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                          currentPage === page
                            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                        }`}
                      >
                        {page}
                      </button>
                    );
                  })}
                  
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <ChevronRight className="h-5 w-5" />
                  </button>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Empty State */}
      {alerts.length === 0 && !loading && !error && (
        <div className="text-center py-12">
          <Bell className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No hay alertas</h3>
          <p className="text-gray-600 mb-6">Genera alertas automáticas o crea una nueva alerta manual</p>
          <div className="flex justify-center space-x-4">
            <button
              onClick={generateAlerts}
              className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <RefreshCw className="h-5 w-5 mr-2" />
              Generar Alertas
            </button>
            <button
              onClick={() => {
                setShowForm(true);
                setEditingAlert(null);
                resetForm();
                setError(null);
              }}
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Plus className="h-5 w-5 mr-2" />
              Nueva Alerta
            </button>
          </div>
        </div>
      )}

      {/* Form Modal */}
      {showForm && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" onClick={() => setShowForm(false)} />
            
            <div className="inline-block w-full max-w-lg p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-medium text-gray-900">
                  {editingAlert ? 'Editar Alerta' : 'Nueva Alerta'}
                </h3>
                <button
                  onClick={() => setShowForm(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <XCircle className="h-5 w-5 text-gray-500" />
                </button>
              </div>

              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Título *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Título de la alerta"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descripción *
                  </label>
                  <textarea
                    required
                    rows={3}
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Descripción detallada de la alerta"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Tipo *
                    </label>
                    <select
                      required
                      value={formData.type}
                      onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      {alertTypes.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Prioridad *
                    </label>
                    <select
                      required
                      value={formData.priority}
                      onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      {priorities.map(priority => (
                        <option key={priority} value={priority}>{priority}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Origen *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.sourceName}
                    onChange={(e) => setFormData({ ...formData, sourceName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Origen o fuente de la alerta"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Fecha de Vencimiento
                  </label>
                  <input
                    type="date"
                    value={formData.dueDate}
                    onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div className="flex items-center justify-end space-x-4 pt-4 border-t border-gray-200">
                  <button
                    type="button"
                    onClick={() => setShowForm(false)}
                    className="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    {editingAlert ? 'Actualizar' : 'Crear'} Alerta
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* View Modal */}
      {viewingAlert && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" onClick={() => setViewingAlert(null)} />
            
            <div className="inline-block w-full max-w-lg p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-medium text-gray-900">Detalles de la Alerta</h3>
                <button
                  onClick={() => setViewingAlert(null)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <XCircle className="h-5 w-5 text-gray-500" />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-500">Título</label>
                  <p className="mt-1 text-sm text-gray-900">{viewingAlert.title}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-500">Descripción</label>
                  <p className="mt-1 text-sm text-gray-900">{viewingAlert.description}</p>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-500">Tipo</label>
                    <p className="mt-1 text-sm text-gray-900">{viewingAlert.type}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-500">Prioridad</label>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(viewingAlert.priority)}`}>
                      {getPriorityIcon(viewingAlert.priority)}
                      <span className="ml-1">{viewingAlert.priority}</span>
                    </span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-500">Estado</label>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(viewingAlert.status)}`}>
                    {viewingAlert.status}
                  </span>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-500">Origen</label>
                  <p className="mt-1 text-sm text-gray-900">{viewingAlert.sourceName}</p>
                </div>

                {viewingAlert.dueDate && (
                  <div>
                    <label className="block text-sm font-medium text-gray-500">Fecha de Vencimiento</label>
                    <p className="mt-1 text-sm text-gray-900">{formatDate(viewingAlert.dueDate)}</p>
                  </div>
                )}

                {viewingAlert.resolvedDate && (
                  <div>
                    <label className="block text-sm font-medium text-gray-500">Fecha de Resolución</label>
                    <p className="mt-1 text-sm text-gray-900">{formatDate(viewingAlert.resolvedDate)}</p>
                    {viewingAlert.resolvedBy && (
                      <p className="text-sm text-gray-600">Por: {viewingAlert.resolvedBy.name}</p>
                    )}
                  </div>
                )}

                {viewingAlert.resolvedNotes && (
                  <div>
                    <label className="block text-sm font-medium text-gray-500">Notas de Resolución</label>
                    <p className="mt-1 text-sm text-gray-900">{viewingAlert.resolvedNotes}</p>
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium text-gray-500">Creada</label>
                  <p className="mt-1 text-sm text-gray-900">{formatDate(viewingAlert.createdAt)}</p>
                </div>
              </div>

              <div className="flex items-center justify-end space-x-4 pt-6 border-t border-gray-200">
                <button
                  onClick={() => setViewingAlert(null)}
                  className="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                >
                  Cerrar
                </button>
                {viewingAlert.status === 'Activa' && (
                  <button
                    onClick={() => {
                      handleResolve(viewingAlert, 'Resuelta');
                      setViewingAlert(null);
                    }}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    Marcar como Resuelta
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AlertsModule;